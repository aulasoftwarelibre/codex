datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roles         String[]  @default(["ROLE_USER"])
  accounts      Account[]
  sessions      Session[]
  Loan          Loan[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Loan {
  id         String    @id @default(cuid())
  startsAt   DateTime  @default(now())
  finishedAt DateTime?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  book       Book      @relation("Loans", fields: [bookId], references: [id])
  bookId     String
  activeLoan Book?     @relation("ActiveLoan") @ignore
}

model Book {
  id           String   @id @default(cuid())
  authors      String[]
  image        String
  title        String
  Loan         Loan[]   @relation("Loans")
  activeLoan   Loan?    @relation("ActiveLoan", fields: [activeLoanId], references: [id])
  activeLoanId String?  @unique
}
