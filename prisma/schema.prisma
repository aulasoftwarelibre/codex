datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  version       Int            @default(0)
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  roles         String[]       @default(["ROLE_USER"])
  accounts      Account[]
  sessions      Session[]
  Loan          Loan[]
  LoanRegistry  LoanRegistry[]
  Review        Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id           String         @id @default(cuid())
  version      Int            @default(0)
  authors      String[]
  image        String
  title        String
  state        BookState      @default(AVAILABLE)
  loan         Loan?
  loanRegistry LoanRegistry[]
  Review       Review[]
}

model Loan {
  id       String   @id @default(cuid())
  version  Int      @default(0)
  startsAt DateTime @default(now()) @db.Timestamptz()
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  book     Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId   String

  @@unique([bookId])
}

model LoanRegistry {
  id         String   @id @default(cuid())
  version    Int      @default(0)
  startsAt   DateTime @db.Timestamptz()
  finishedAt DateTime @db.Timestamptz()
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId     String
}

enum BookState {
  AVAILABLE
  LOANED
}

model Review {
  id          String   @id @default(cuid())
  version     Int      @default(0)
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime @default(now()) @db.Timestamptz()
  score       Int
  title       String   @default("")
  description String   @default("")

  @@unique([userId, bookId])
}
